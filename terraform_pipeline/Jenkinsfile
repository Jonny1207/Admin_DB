def wks
def credID

node {
  script {
    wks = "${env.WORKSPACE}"
    if ( wks =~ /production\//) {
        credID = 'vault-approle-prod'
        path = 'secret/EC2/production'
    } else {
        credID = 'vault-approle'
        path = 'secret/EC2'
    }
  }
}

def secrets = [
  [ path: path + '/credentials',
    engineVersion: 2,
    secretValues: [
        [ envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID' ]
    ]
  ],

  [ path: path + '/credentials',
    engineVersion: 2,
    secretValues: [
        [ envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']
    ]
  ],

  [ path: path+ '/credentials',
    engineVersion: 2, \
    secretValues: [
        [ envVar: 'PUB_KEY', vaultKey: 'id_rsa']
    ]
  ],

//   [ path: path+ '/${ENVIRONMENT}/credentials',
//     engineVersion: 2, \
//     secretValues: [
//       [ envVar: 'ENV_KEY', vaultKey: 'KEY']
//     ]
//   ],

]

def configuration = [
  vaultUrl: 'http://192.168.0.180:8200',
  skipSslVerification: 'true',
  vaultCredentialId: credID,
  engineVersion: 2
]

pipeline {

//   agent {
//       label 'custom-ec2'
//    }
    agent any

  parameters {
    string(name: 'EC2_tag', description: 'Tag Name of the new EC2 instance to deploy', defaultValue: 'oracle')
    booleanParam(name: 'Terraforn_plan', description: '(Optional) Check the terraform plan before applying it (default: no)')
  }
  stages {
    stage("Installing terraform") {
      steps {     
        sh'''#!/bin/bash
            ##Install Terraform
            source ./terraform_pipeline/scripts/terraform_install.sh
            binaries::installTerraform
        '''
       }
    }
    stage('Creating EC2 instance') {
      steps {
        withVault([configuration: configuration, vaultSecrets: secrets]) {
          sh '''
            #!/bin/bash
            cd terraform_pipeline/terraform/
            echo "Intializing terraform"
            terraform init

            if [ ${Terraforn_plan} == "true" ]; then
              terraform plan -var KEY_NAME="id_rsa" -var PUB_KEY="${PUB_KEY}" -var TAG_INSTANCE="${EC2_tag}" -var AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" -var AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" 
            else
              terraform apply -var KEY_NAME="id_rsa" -var PUB_KEY="${PUB_KEY}" -var TAG_INSTANCE="${EC2_tag}" -var AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" -var AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" -auto-approve
            fi
            '''
        }
      }
   }
 }
}