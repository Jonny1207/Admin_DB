- name: Install specified python requirements
  pip:
    chdir: ./
    executable: pip3
    requirements: ./requirements.txt
  tags: always

- name: "Checking Pods state"
  shell: oc get pods --all-namespaces -o jsonpath='{range .items[*]} {.metadata.ownerReferences[*].kind} {.metadata.namespace} {.metadata.name} {.status.phase} {.status.containerStatuses[*].ready}{"\n"}' | grep -i false | grep -v Job
  register: pod_status
  failed_when: pod_status.rc == 1 and pod_status.stderr != ""
  tags: pods

- name: "Checking Nodes status"
  shell: oc get nodes --no-headers | grep -Ei "NotReady|SchedulingDisabled|Unknown" | awk '{print $1}'
  register: nodes_status
  failed_when: nodes_status.rc == 1 and nodes_status.stderr != ""
  tags: nodes

- name: "Getting Node condition status verbose"
  shell: oc get node {{item}} -o jsonpath='{.metadata.name}{"\n"}{range .status.conditions[*]}{.message}{"\n"}'
  register: nodes_status_verbose
  loop: "{{ nodes_status.stdout_lines }}"
  when: nodes_status.stdout != ""
  tags: nodes

- name: "Checking Pods on CrashLoopBackOff"
  shell: oc get pod --all-namespaces --no-headers | grep -i "CrashLoopBackOff" | awk '{print $1","$2}'
  register: pods_crashloop
  failed_when: pods_crashloop.rc == 1 and pods_crashloop.stdout != ""
  tags: crash

- name: "Describing CrashLoopBackOff pods"
  shell: oc describe pod -n "{{item.split(',')[0] | lower}}" "{{item.split(',')[1] | lower}}" | sed -n '/^Events:/,$p'
  register: pods_crashloop_verbose
  loop: "{{ pods_crashloop.stdout_lines }}"
  when: pods_crashloop.stdout != ""
  tags: crash

- name: Get clx-shell and clx-console logs error
  shell: |
    oc logs -n "{{namespace}}" -l name=clx-shell | grep -i "error" | tr "," "\n" | grep -E "hostname|message" | sed 'N;s/\n/ /' | sed 's/}//g' | tr -d '"' | sort -u  &&
    oc logs -n "{{namespace}}" -l name=clx-console | grep -i "error" | tr "," "\n" | grep -E "hostname|message" | sed 'N;s/\n/ /' | sed 's/}//g' | tr -d '"' | sort -u
  register: clx_logs
  failed_when: clx_logs.rc == 1 and clx_logs.stderr != ""
  tags: clx

- name: "Get iscsequences status"
  shell: kubectl get iscsequences  -n "{{namespace}}" -o jsonpath='{range .items[*]} name:{.metadata.name} {.status.conditions[0].reason} {.status.conditions[0].message} {"\n"}' | grep -i failed
  register: iscsequences_status
  failed_when: iscsequences_status.rc == 1 and iscsequences_status.stderr != ""
  tags: iscsequences

- name: "Checking image version"
  shell: oc get pods -n "{{namespace}}" -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s '[[:space:]]' '\n' | sort -u | grep -v 'Rel_1.*.0.0\|sha256\|latest\|synthetics-minion'
  register: image_version
  failed_when: image_version.rc == 1 and image_version.stderr != ""
  tags: images

#Printing results
- name: "Printing containers in a pod that are presenting errors"
  debug:
    msg: "{{ pod_status.stdout_lines }}"
  when: pod_status.rc == 0
  tags: pods

- name: "Printing Nodes that are presenting errors"
  debug:
    msg: "{{item.stdout_lines}}"
  loop: "{{ nodes_status_verbose.results }}"
  tags: nodes
  when: nodes_status_verbose.results != ""

- name: "Printing CrashLoopBackOff pods"
  debug:
    msg: "{{item.stdout_lines}}"
  loop: "{{ pods_crashloop_verbose.results }}"
  when: pods_crashloop_verbose.results != ""
  tags: crash

- name: "Print clx-shell and clx-console error log"
  debug:
    msg: "{{ clx_logs.stdout_lines }}"
  when: clx_logs.stdout_lines != ""
  tags: clx

- name: "Print iscsequences Status"
  debug:
    msg: "{{ iscsequences_status.stdout_lines }}"
  when: iscsequences_status.rc == 0
  tags: iscsequences

- name: "Verifying image names that do not include the following patterns: Rel_1.*.0.0, sha256, or latest."
  debug:
    msg: "{{ image_version.stdout_lines }}"
  when: image_version.stdout_lines != ""
  tags: images
